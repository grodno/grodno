var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Object.entity.defineProperty({
  id: "Liquid",
  methods: function() {
    return {
      comparator: Function.FALSE
    };
  }
});

Object.entity.defineProperty({
  id: "Boolean",
  methods: function() {
    return {
      comparator: function(a, b) {
        return (!a) === (!b);
      },
      setter: function(T, v, ev) {
        return T._state[this.id] = !!v;
      }
    };
  }
});

Object.entity.defineProperty({
  id: "Number",
  methods: function() {
    return {
      comparator: function(a, b) {
        return Number(a) === Number(b);
      },
      setter: function(T, v, ev) {
        return T._state[this.id] = Number(v);
      }
    };
  }
});

Object.entity.defineProperty({
  id: "Date",
  methods: function() {
    return {
      comparator: function(a, b) {
        return Date.compare(a, b) === 0;
      }
    };
  }
});

Object.entity.defineProperty({
  id: "Value",
  mixin: function(_super) {
    return {
      getValue: function() {
        return this.prop("value");
      },
      setValue: function(v) {
        return this.prop("value", v);
      },
      isEmptyValue: function(e) {
        return !this.getValue();
      },
      equalsToValue: function(v) {
        return v && (this.getValue() === ("" + v));
      }
    };
  }
});

Object.entity.defineProperty({
  id: "MultiValue",
  mixin: function(_super) {
    return {
      valueChanged: function(ev, v) {
        this.prop("mvalue", (v ? (v.split && v.length ? v.split(this.mvalueSeparator || ",") : ["" + v]) : []));
        _super.valueChanged.call(this, ev, v);
      },
      getMultiValue: function() {
        return this.mvalue || [];
      },
      equalsValue: function(v) {
        var _ref;
        return v && (_ref = "" + v, __indexOf.call(this.getMultiValue(), _ref) >= 0);
      },
      putIntoMultiValue: function(pk, v) {
        var changed, contained, i, mv, _i, _len;
        if (!pk) {
          return;
        }
        mv = this.getMultiValue();
        pk = "" + pk;
        contained = __indexOf.call(mv, pk) >= 0;
        changed = false;
        if (v === -1) {
          v = (contained ? 0 : 1);
        }
        if (v && !contained) {
          mv.push(pk);
          changed = true;
        }
        if ((!v) && contained) {
          for (i = _i = 0, _len = mv.length; _i < _len; i = ++_i) {
            pk = mv[i];
            if (pk === mv[i]) {
              mv.splice(i, 1);
              changed = true;
              break;
            }
          }
        }
        return changed && this.setValue(mv.sort().join(this.mvalueSeparator));
      }
    };
  }
});

Object.entity.defineProperty({
  id: "IsReady",
  methods: function() {
    return {
      comparator: function(a, b) {
        return (!a) === (!b);
      },
      setter: function(T, v, ev) {
        return T._state[this.id] = !!v;
      }
    };
  },
  mixin: function(_super) {
    return {
      isReady: function() {
        return this.prop("ready");
      },
      setIsReady: function() {
        return this.prop("ready", true);
      },
      unsetIsReady: function() {
        return this.prop("ready", false);
      }
    };
  }
});


/*
Define EventHandler entity type
 */

Object.entity.define({
  id: "EventHandler",
  properties: ["ready:IsReady"],
  options: {
    ready: true
  },
  methods: function(_super) {
    var HANDLER_STUB;
    HANDLER_STUB = function(ev) {
      return ev.callback(Object.error.BAD, "No EventHandler Implementation: " + ev.uri);
    };
    return {
      onEvent: function(ev) {
        Object.log("" + this.id + ".onEvent", ev);
        if (this.isReady(ev)) {
          return this.handleEvent(ev);
        } else {
          return (this.deferedEvents || (this.deferedEvents = [])).push(ev);
        }
      },
      readyChanged: function(_ev, ready) {
        var ev, evs, _i, _len, _results;
        if (ready) {
          evs = this.deferedEvents;
          this.deferedEvents = null;
          if (evs) {
            _results = [];
            for (_i = 0, _len = evs.length; _i < _len; _i++) {
              ev = evs[_i];
              _results.push(this.handleEventImpl(ev));
            }
            return _results;
          }
        }
      },
      createEventHandlerImpl: function() {
        return function(ev) {
          return HANDLER_STUB.call(this, ev);
        };
      },
      init: function() {
        if (!this.id) {
          throw Error('No id for EventHandler');
        }
        _super.init.call(this);
        if (!this.handleEvent) {
          return this.handleEvent = this.createEventHandlerImpl();
        }
      }
    };
  }
});


/*
Define Cache entity type
 */

Object.entity.define({
  id: "Cache extends EventHandler",
  methods: function(_super) {
    var DRY_VERSION;
    DRY_VERSION = -1;
    return {
      resolveUri: Function.NONE,
      cacheDeserializer: Object.parse,
      fetchUnmarshaller: Function.NONE,
      getVersion: function() {
        return -1;
      },
      fetch: function(uri, cb) {
        return Object.fire({
          uri: this.resolveUri(uri),
          callback: cb,
          unmarshaller: this.fetchUnmarshaller
        });
      },
      createDryRunEventHandlerImpl: function() {
        return (function(_this) {
          return function(ev) {
            return _this.fetch(ev.uri, function(err, data) {
              if (!err && data) {
                return ev.callback(err, this.cacheDeserializer.call(id, data));
              }
            });
          };
        })(this);
      },
      createEventHandlerImpl: function() {
        var _cache;
        if ((this.getVersion() === DRY_VERSION) || !this.storage) {
          return this.createDryRunEventHandlerImpl();
        }
        _cache = {};
        return (function(_this) {
          return function(ev) {
            var id, key, r, u;
            u = ev.uri;
            id = u.id.slice(2);
            key = _this.id + ":" + id;
            r = _cache[id];
            if (!r && (r = _lstorage[key]) && (r.indexOf(_ver + ":") === 0) && (r = r.slice(_ver.length + 1))) {
              r = _cache[id] = _this.cacheDeserializer.call(id, r);
            } else {
              r = null;
            }
            if (r) {
              return ev.callback(null, r);
            } else {
              return _this.fetch(id, function(err, data) {
                var rr;
                rr = null;
                if (err) {
                  Object.error(err, "fetch data for versioned cache").log();
                } else if (data) {
                  rr = _cache[id] = (typeof data === "object" ? data : _this.cacheDeserializer.call(id, data));
                  try {
                    _this.storage.setItem(key, _ver + ":" + (typeof data === "object" ? JSON.stringify(data) : data));
                  } catch (_error) {}
                }
                return ev.callback(err, rr);
              });
            }
          };
        })(this);
      }
    };
  }
});


/*
Define Cache entity type
 */

Object.entity.define({
  id: "CodeLoader extends Cache",
  methods: function(_super) {
    return {
      resolveUri: function(uri) {
        return "http://*/js/" + uri.domain + ".js?v=" + (this.getVersion());
      },
      cacheDeserializer: function(s) {
        try {
          (Function.call(Function, s))();
          return true;
        } catch (_error) {
          return Object.error(_error, "JS syntax:" + ex.message).log();
        }
      },
      createDryRunEventHandlerImpl: function() {
        return (function(_this) {
          return function(ev) {
            return Object.require([_this.resolveUri(ev.uri)], ev.callback);
          };
        })(this);
      }
    };
  }
});

Object.entity.define({
  id: "ValueStorage",
  properties: ["value:Value"],
  methods: function(_super) {
    return {
      init: function() {
        this.storage = this.createStorage();
        this.initStorage();
        return _super.init.call(this);
      },
      createStorage: function() {
        return this._options.storage || {
          getItem: function(key) {
            return this[key];
          },
          setItem: function(key, value) {
            return this[key] = value;
          }
        };
      },
      initStorage: function() {
        var s;
        return this.value = (s = this.storage.getItem(this.id)) && Object.parse(s) || this.value || {};
      },
      propertyChanged: function(ev, value, propId) {
        _super.propertyChanged.call(this(ev, value, propId));
        if (propId !== 'value') {
          if (this.valueDelta) {
            return this.valueDelta[propId] = value;
          } else {
            this.valueDelta = {};
            return setTimeout((function(_this) {
              return function() {
                _this.valueDelta = null;
                return _this.setValue(Object.clone(_this.getValue(), che.delta));
              };
            })(this), 1000);
          }
        }
      },
      valueChanged: function(ev, val) {
        this.persistValue(val);
        return _super.valueChanged.call(this, ev, val);
      },
      persistValue: function(v) {
        var s;
        try {
          if (this.storage.getItem(this.id) !== (s = JSON.stringify(v))) {
            return this.storage.setItem(this.id, s);
          }
        } catch (_error) {}
      }
    };
  }
});

//# sourceMappingURL=data:application/json;base64,
