// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Object.entity.define({
    id: 'webserver.DispatcherPlugin',
    config: function(app) {
      var HTTP_METHODS;
      HTTP_METHODS = ["get", "post", "put", "delete", "options"];
      return app.use((function(_this) {
        return function(req, res, next) {
          var i, method, n, op, opId, opName, opts, plugin, uri, v, _i, _len, _ref, _ref1, _ref2;
          opts = req.options = {};
          method = req.method = req.method.toLowerCase();
          if (__indexOf.call(HTTP_METHODS, method) < 0) {
            return next();
          }
          uri = req.uri = Object.Uri.parse("//*" + (req.url === '/' ? '/home' : req.url));
          if (!(plugin = app[uri.path[0]])) {
            return next();
          }
          _ref = req.headers;
          for (n in _ref) {
            v = _ref[n];
            opts[n.toLowerCase()] = v;
          }
          _ref1 = uri.params;
          for (n in _ref1) {
            v = _ref1[n];
            opts[n.toLowerCase()] = v;
          }
          _ref2 = uri.path;
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            v = _ref2[i];
            opts['path' + i] = v;
          }
          if (uri.hash) {
            opts.hash = uri.hash;
          }
          opts.uri = uri;
          if (!opts.access_token) {
            opts.access_token = opts["x-authorization"] || opts["authorization"];
          }
          if (!opts.language) {
            opts.language = opts.lang || String.LANGUAGE;
          }
          opId = String.capitalize(uri.path[1] || 'default');
          op = Object.prop(plugin, method + opId);
          opName = [plugin.id, ".", method, opId].join('');
          Object.log("Dispatch " + uri + " into " + opName);
          if (op) {
            try {
              return op.call(plugin, opts, function(err, result) {
                req.error = err;
                req.result = result;
                return next();
              });
            } catch (_error) {
              req.error = _this.error(_error, "Error in " + opName + " ");
            }
          } else {
            if ((method === "options") && plugin["post" + opId]) {
              req.result = "OK";
            } else {
              req.error = Object.error("not-found: Operation not found: " + opName).log();
            }
          }
          return next();
        };
      })(this));
    }
  });

}).call(this);
