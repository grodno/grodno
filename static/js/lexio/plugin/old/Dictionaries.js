// Generated by CoffeeScript 1.7.1
(function() {
  Object.entity.define({
    id: "lexio.plugin.Dictionaries extends lexio.Plugin",
    requires: ['gsheet://0AqQx4KOOt8TGdExjQ2ZJM0Q5MFBQSVRhYUw1ZHJMSFE', 'gsheet://0AqQx4KOOt8TGdEFhUExMU3ZsaVl3RDBiWXhtcWVDZ2c'],
    methods: function(_super) {
      var DIFTONGS, TYPE_U, addIntoTree, applySourceData, enums, registry, treeGenerator, _reg;
      _reg = (function(v, p) {
        var i, ids;
        this[v.id] = v;
        ids = v.ids;
        if (ids) {
          ids = ids.split(",");
          i = 0;
          while (i < ids.length) {
            this[ids[i]] = v;
            i++;
          }
        }
      }).iterator();
      registry = (function(v) {
        var key;
        key = v.toUpperCase();
        _reg(this[v], String[key] || (String[key] = {}));
      }).iterator();
      enums = (function(v) {
        var b, key;
        key = v.key.toUpperCase();
        b = String[key] || (String[key] = {});
        b[v.id] = v.value;
      }).iterator();
      Array.prototype.mirrorItems = function() {
        return (function(v) {
          this.push(v.mirror(""));
        }).iterator()(this, []);
      };
      treeGenerator = (function(v) {
        Object.set(this, (v + "_").split("").join("."), v);
      }).iterator();
      addIntoTree = function(key, data) {
        return treeGenerator(data, String[key] || (String[key] = {}));
      };
      TYPE_U = {
        type: "x"
      };
      DIFTONGS = ["oo", "ea", "ei", "th", "gh", "ou", "sh", "ch"];
      String.signature = function(x) {
        var c, i, l, p, r;
        i = 0;
        r = "";
        l = x.length;
        p = void 0;
        c = void 0;
        while (i < l) {
          c = x[i];
          if (c !== p && DIFTONGS.indexOf(p + c) === -1) {
            r += (String.CHARS[c] || TYPE_U).type;
            p = c;
          }
          i++;
        }
        return r;
      };
      return applySourceData = function(data) {
        registry(["chars", "roots", "complexies", "hardcoded", "chars", "root_masks"], data);
        enums(data["~"]);
        data.complexies && addIntoTree("COMPLEXIES_TREE", data.complexies.getKeys());
        data.prefixes && addIntoTree("PREFIXES_TREE", data.prefixes.getKeys());
        data.suffixes && addIntoTree("SUFFIXES_TREE", data.suffixes.getKeys().mirrorItems());
        data.flexies && addIntoTree("FLEXIES_TREE", data.flexies.getKeys().mirrorItems());
        return;
        return {
          onRequires: function(sources) {
            return Function.iterate(applySourceData, Array.slice(arguments_, 2), T.home);
          },
          init: function() {
            var T;
            _super.init.call(this);
            T = this;
          },
          perform: function(err, ev) {
            return ev;
          }
        };
      };
    }
  });

}).call(this);
