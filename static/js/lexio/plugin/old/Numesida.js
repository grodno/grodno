// Generated by CoffeeScript 1.7.1
(function() {
  Object.entity.define({
    id: "lexio.plugin.Numesida extends lexio.Plugin",
    methods: function(_super) {
      return {
        prepare: function(event) {
          return event.rootElt.eachChildInDeep(this, function(elt) {
            if (elt.kind === 'text') {
              return this.splitWords(elt);
            }
          });
        },
        splitSentences: function(elt) {
          var e, found, index, pastLastIndex, re, s, text;
          pastLastIndex = 0;
          s = elt.text;
          re = /\.\s/g;
          while ((e = re.exec(s))) {
            index = elt.index + e.index;
            found = true;
            if (e.index && (text = s.slice(pastLastIndex, +(e.index - 1) + 1 || 9e9))) {
              elt.home.register(index, new TextLexion({
                text: text + '.',
                parent: elt
              }));
            }
            pastLastIndex = re.lastIndex;
          }
          if (pastLastIndex) {
            elt.kind = 'box';
            if ((text = s.slice(pastLastIndex))) {
              return elt.home.register(pastLastIndex, new TextLexion({
                text: text,
                parent: elt
              }));
            }
          }
        },
        splitWords: function(elt) {
          var pastLastIndex, re, re2, s;
          pastLastIndex = 0;
          s = elt.text;
          re = /\W+/g;
          re2 = /\b\d{1,3}(?:(([,\x20]\d{3,3})*(\.\d{1,})?)|((-\d{1,7})+)|\d+)?/g;
          return elt.executeRegExp(re, function(text, e) {
            var p, punkts, _i, _len, _results;
            if (e) {
              punkts = text.split('');
              _results = [];
              for (_i = 0, _len = punkts.length; _i < _len; _i++) {
                p = punkts[_i];
                _results.push(new Lexion({
                  kind: p === ' ' ? 's' : 'p',
                  tag: 'i',
                  text: p,
                  parent: elt
                }));
              }
              return _results;
            } else {
              return new Lexion({
                tag: 'span',
                kind: 'word',
                text: text,
                parent: elt
              });
            }
          });
        }
      };
    }
  });

}).call(this);
