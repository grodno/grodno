// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    var checkFactor, checkFlexie, checkMeasures, checkPrefix, _op;
    checkFactor = function(t) {
      var n;
      n = t.next;
      if (n && n.kind === "s") {
        n = n.next;
      }
      if (n && FACTORS[n.id]) {
        Object.update(t, FACTORS[n.id]);
        t.input += " " + n.input;
        t.setNext(n.next);
      }
      if (t.next && t.next.id === ".") {
        t.setNext(n.next.next);
      }
    };
    checkMeasures = function(t) {
      var k, k2, m, n, n2;
      n = t.next;
      while (n && ("er".indexOf(n.kind) === -1)) {
        n = n.next;
      }
      if (!n) {
        return;
      }
      k = Object.get(n.word, "best.root") || n.id;
      if (MEASURES[k]) {
        Object.update(t, MEASURES[k]);
        t.input += " " + t.measure;
        t.setNext(n.next);
      } else {
        n2 = n.next;
        while (n2 && ("er".indexOf(n2.kind) === -1)) {
          n2 = n2.next;
        }
        if (!n2) {
          return;
        }
        k2 = Object.get(n2.word, "best.root") || n2.id;
        m = MEASURES[k + "_" + k2] || MEASURES[k2 + "_" + k];
        if (m) {
          Object.update(t, m);
          t.input += " " + t.measure + (t.measureSpec ? "<sup>" + t.measureSpec + "</sup>" : "");
          t.setNext(n2.next);
        }
      }
    };
    checkFlexie = function(t) {
      var n;
      n = t.next;
      if (n && n.kind === "s") {
        n = n.next;
      }
      if (n && n.id === "-") {
        n = n.next;
      }
      if (n && FLEXIES[n.id]) {
        Object.update(t, FLEXIES[n.id]);
        t.input += "-" + t.flexie;
        t.setNext(n.next);
      }
    };
    checkPrefix = function(t) {
      var p;
      p = t.prev;
      if (p && ("er".indexOf(p.kind) + 1)) {
        if (p && PREFIXES[p.id]) {
          Object.update(t, PREFIXES[p.id]);
          t.input += " " + t.measure;
          t.setPrev(p.prev);
          return;
        }
        if ("er".indexOf(p.kind) + 1) {
          p.input = (p.id += t.id);
          p.kind = "a";
          t.remove();
        }
      }
    };
    _op = function(t) {
      var n2;
      if (t.kind === "d") {
        n2 = Object.get(t.next, "next");
        if (n2 && (".,".indexOf(t.next.id) + 1) && (n2.kind === "d")) {
          t.input = (t.id += "." + n2.id);
          t.setNext(n2.next);
        }
        t.tags.push("label", "numeric");
        checkFlexie(t);
        checkFactor(t);
        checkMeasures(t);
        checkPrefix(t);
      }
    };
    Object.entity.define("lexio/plugin/numbers extends lexio/Plugin", {
      methods: function(_super) {
        return {
          performImpl: function(err, ev) {
            ev.eachToken(_op);
          }
        };
      }
    });
  })();

}).call(this);
