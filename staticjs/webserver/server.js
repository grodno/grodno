// Generated by CoffeeScript 1.8.0
(function() {
  Object.entity.define({
    id: 'webserver.Express',
    properties: ['config', "plugins:Plugins"],
    methods: function(_super) {
      return {
        init: function() {
          return _super.init.call(this);
        }
      };
    }
  });

  Object.entity.define({
    id: 'webserver.Application',
    properties: ['config', "plugins:Plugins"],
    methods: function(_super) {
      return {
        init: function() {
          return _super.init.call(this);
        }
      };
    }
  });

  Object.entity.define({
    id: "webserver.Plugin extends EventHandler",
    methods: function(_super) {
      var opDone, opInitArray;
      opDone = function(err, result, mime) {
        var ev;
        ev = this.event;
        if (this.viewId) {
          ev.renderView(this.viewId, result);
        } else {
          if (err) {
            ev.error(err);
          } else {
            ev.send(result, this.contentType || mime);
          }
        }
        ev.done();
      };
      opInitArray = [
        function(ev) {
          this.event = ev;
          this.options = ev.options;
          this.payload = ev.payload;
          ev.callback = this;
          this(ev);
        }
      ];
      return {
        init: function() {
          var m;
          _super.init.call(this);
          Object.log("++Module: ", this.id);
          m = this.impl = require(this.requirePath, true);
          m.init && m.init(this.server, this.config);
        },
        done: function() {
          Object.log("--Module: ", this.id);
          this.impl.done && this.impl.done(this);
        },
        handleEvent: function(ev) {
          var ex, op, opId, opName, uri;
          ev = ev.payload;
          uri = ev.uri;
          opId = String.capitalize(String.camelize(uri.path[1]));
          op = this.impl[ev.options.method + opId];
          opName = this.id + "." + ev.options.method + opId;
          if (op) {
            try {
              Object.log("!!! Operation", opName);
              Function.perform(opInitArray.concat(op, opDone), ev);
            } catch (_error) {
              ex = _error;
              ev.error(ex, "Error in " + opName);
            }
          } else {
            if ((ev.options.method === "options") && this["post" + opId]) {
              ev.send("OK");
            } else {
              ev.error("no-op", "Operation not found: " + opName);
            }
          }
        }
      };
    }
  });

  Object.entity.define("RemoteServer extends EventHandler", {
    methods: function(_super) {
      var initModuleIterator;
      initModuleIterator = (function(cfg, i, T) {
        var p;
        cfg = Object.narrowFromString(cfg);
        p = T.config("rootdir", ".") + "/" + (cfg.path || String.format(T.config("modulesPattern") || "{0}.js", cfg.id));
        this[cfg.id] = Object.entity.create({
          id: "RemoteServerModule:remote_" + cfg.id,
          config: cfg,
          server: T,
          requirePath: p
        });
      }).iterator();
      return {
        init: function() {
          this.httpServer = require("http").createServer(this.app);
          _super.init.call(this);
          this.modules = initModuleIterator(this.config("modules"), {}, this);
        },
        done: function(cb) {
          var n;
          Object.unlisten._all();
          for (n in this.modules) {
            this.modules[n].done();
          }
          this.httpServer.removeAllListeners("connection");
          this.httpServer.removeAllListeners("request");
          this.httpServer.close(cb);
          return this;
        },
        config: function(key, def) {
          return Object.get(this.cfg, key) || def || null;
        },
        listenHttpPort: function(port, cb) {
          port = port || this.config("http.port", 80);
          this.httpServer.listen(port, function() {
            Object.log("Server is listening at port: ", port);
            cb && cb();
          });
        },
        createHandler: function() {
          return function(req, res, next) {
            var ev, foundModule, isMethodAllowed;
            isMethodAllowed = ["get", "post", "put", "delete", "options"].indexOf(req.method.toLowerCase()) > -1;
            if (!isMethodAllowed) {
              next();
            } else {
              ev = Object.entity.create({
                id: "RemoteServerEvent",
                req: req,
                res: res
              });
              foundModule = Object.notify({
                uri: "remote_" + (ev.uri.path[0] || "home") + "://handle",
                payload: ev
              });
              if (!foundModule) {
                next();
              }
            }
          };
        }
      };
    }
  });

  Object.entity.define("RemoteServerEvent extends EventHandler", {
    methods: function(_super) {
      return {
        init: function(config) {
          var host, n, opts, req;
          _super.init.call(this);
          req = this.req;
          this.payload = req.body || "";
          opts = this.options = {};
          for (n in req.headers) {
            opts[n.toLowerCase()] = req.headers[n];
          }
          host = opts["x-forwarded-host"] || opts.host || "default";
          this.uri = Object.parseUri("//" + host + req.url);
          this.access_token = opts["x-authorization"] || opts["authorization"] || null;
          Object.update(opts, this.uri.params);
          opts.method = req.method.toLowerCase();
          opts.language = opts.language || opts.lang || String.LANGUAGE;
        },
        done: function() {
          this.payload = this.req = this.res = null;
        },
        error: function(err, message) {
          Object.error.log(Object.http.sendError(this.res, err, message));
        },
        sendStatic: function(filename) {
          Object.notify({
            uri: "file://" + filename,
            res: this.res
          });
        },
        sendJson: function(obj, reason) {
          Object.http.sendJson(this.res, obj, reason);
        },
        send: function(result, mime, reason) {
          Object.http.send(this.res, (typeof result === "string" ? result : JSON.stringify(result)), mime, reason);
        },
        renderView: function(viewId, context) {
          Object.notify({
            uri: "view://" + viewId,
            context: context,
            res: this.res
          });
        }
      };
    }
  });

  (function() {
    Object.entity.define("SocketServer extends EventHandler", {
      methods: function(_super) {
        return {
          init: function() {
            var T, io, sockets;
            T = this;
            _super.init.apply(this, arguments_);
            io = require("socket.io").listen(this.httpServer);
            io.configure(function() {
              io.set("transports", T.transports || ["xhr-polling"]);
              io.set("polling duration", T.pollingDuration || 15);
              io.enable(T.enable || "log");
            });
            sockets = io.sockets;
            T.broadcastAll = function(ev) {
              sockets.json.send(ev.payload);
            };
            sockets.on("connection", function(socket) {
              Object.debug("connection");
              socket.on("connect", function() {
                T.onConnect({});
              });
              socket.on("message", function(ev, callback) {
                Object.debug("message", ev, callback);
                ev.callback = callback || Function.NONE;
                if (ev.user) {
                  socket.set("user", ev.user, function() {
                    Object.notify(ev);
                  });
                } else {
                  socket.get("user", function(err, user) {
                    ev.user = user;
                    Object.notify(ev);
                  });
                }
              });
              socket.on("disconnect", function() {
                T.onDisconnect({});
              });
            });
          },
          onConnect: function(ev) {
            Object.debug("onConnect");
          },
          onDisconnect: function(ev) {
            Object.debug("onDisconnect");
          },
          user: function(ev) {
            Object.debug("user");
            ev.callback();
          },
          handleEventImpl: function(ev) {
            var op;
            op = ev.uri.host;
            Object.debug("Socket.", op);
            ev.uri = ev.uri.hash || ev.uri;
            this[op](ev);
          }
        };
      }
    });
  })();

}).call(this);
