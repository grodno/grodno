// Generated by CoffeeScript 1.8.0

/*
==========================================================================
Axio: Localization resources.
==========================================================================
 */

(function() {
  String.LANGUAGES = [String.LANGUAGE = "en"];

  String.localize = (function(_cache, fn) {
    var RE, extractVal, normalize, _getArr, _getArr2, _lcache, _localize, _undef;
    _undef = void 0;
    RE = new RegExp("_", "g");
    normalize = function(s) {
      return String.capitalize(s).replace(RE, " ");
    };
    extractVal = function(v, id, lng) {
      v = v.value || v.name || v;
      if (typeof v === "string") {
        return v;
      } else {
        return v[lng] || normalize(id);
      }
    };
    _getArr = (function(v, i, lng) {
      if (v.id !== "_array") {
        this.push(Object.update(Object.clone(v), {
          name: extractVal(v, v.id, lng)
        }));
      }
    }).iterator();
    _getArr2 = function(obj, lng) {
      var id, r, value;
      r = [];
      for (id in obj) {
        if (id !== "_array") {
          value = obj[id];
          r.push(Object.update(Object.clone(value), {
            id: id,
            name: extractVal(value, id, lng)
          }));
        }
      }
      return r;
    };
    _localize = function(l, s, q) {
      var c, r;
      c = _lcache(l);
      r = void 0;
      r = c[s] || normalize(s);
      if (q !== _undef) {
        return c[s + "." + q] || String.format(r, q);
      } else {
        return r;
      }
    };
    _lcache = function(l) {
      return _cache[l] || (_cache[l] = {});
    };
    fn = function(s, q) {
      if (!s) {
        return "";
      } else {
        return _localize(String.LANGUAGE, s, q);
      }
    };
    fn.all = _cache;
    fn.withLanguage = _localize;
    fn.addBundle = (function() {
      return function(obj, _lng) {
        var id, j, l, lng, lngs, val;
        lngs = (_lng ? [_lng] : String.LANGUAGES);
        for (id in obj) {
          val = obj[id];
          j = 0;
          l = lngs.length;
          while (j < l) {
            lng = lngs[j];
            (_lcache(lng))[id] = (val && val._array ? _getArr2(val, lng) : (Array.isArray(val) ? _getArr(val, [], lng) : extractVal(val, id, lng)));
            j++;
          }
        }
        return obj;
      };
    })();
    fn.put = function(key, value, lang) {
      (_lcache(lang || String.LANGUAGE))[key] = value;
    };
    ({
      createL10NSource: function(version, urlTemplate, key) {
        Object.entity.create({
          id: "EventHandler:" + (key || "l10n"),
          handleEvent: this.createSource({
            version: version,
            urlTemplate: "[remote]" + (urlTemplate || ("/l10n/l10n-{0}.js?v=" + version)),
            cacheDeserializer: function(str) {
              var e;
              try {
                String.localize.addBundle((Function.call(Function, str))());
                return true;
              } catch (_error) {
                e = _error;
                Object.error.log("Object.parse", str, e);
              }
              return null;
            }
          })
        });
      }
    });
    Object.entity.create({
      id: "EventHandler:string",
      handleEventImpl: function(ev) {
        ev.callback(null, fn(ev.uri.host));
      }
    });
    return fn;
  })({});

}).call(this);
